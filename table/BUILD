load("//:rocksdb.bzl", "constrained_library", "constrained_test")

DEFAULT_DEFINES = select({
    "//:linux": ["ROCKSDB_PLATFORM_POSIX=1"],
    "//:osx": ["ROCKSDB_PLATFORM_POSIX=1"],
    "//conditions:default": [],
})

cc_library(
    name = "table",
    srcs = glob(["*.cc","block_based/*.cc","adaptive/*.cc","cuckoo/*.cc","plain/*.cc"],  exclude=["*_test.cc"]),
    deps = [
        ":headers",
        ":db_headers",
        "//db:headers",
        "//include",
        "//cache:headers",
        "//memory:headers",
        "//options:headers",
        "//util:headers",
        "//logging:headers",
        "//test_util:headers",
        "//trace_replay:headers"
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "headers",
    hdrs = glob(["*.h","block_based/*.h","adaptive/*.h","cuckoo/*.h","plain/*.h"]),
    deps = [
        "//trace_replay:headers",
        "//test_util:headers"
    ],
    visibility = ["//visibility:public"],
    defines = DEFAULT_DEFINES,
)

cc_library(
    name = "db_headers",
    hdrs = glob(["get_context.h", "internal_iterator.h", "iter_heap.h", "merging_iterator.h", "meta_blocks.h",
                 "multiget_context.h", "sst_file_writer_collectors.h", "table_builder.h", "table_reader.h",
                 "block_based/block.h", "block_based/block_based_table_factory.h",
                 "block_based/block_based_table_reader.h",
                 "block_based/filter_block.h",
                 "block_based/full_filter_block.h",
                 "block_based/partitioned_filter_block.h",
                 "cuckoo/cuckoo_table_reader.h",
                 "plain/plain_table_index.h",
                 "plain/plain_table_key_coding.h",
                 "plain/plain_table_reader.h",
                 ]),
    deps = [
        "//include",
        "//trace_replay:headers",
        "//db:headers",
    ],
    visibility = ["//visibility:public"],
    defines = DEFAULT_DEFINES,
)

constrained_library(
    name = "test_utils",
    hdrs = glob(["mock_table.h"]),
    srcs = glob(["mock_table.cc"]),
    deps = [
        "//memtable:headers",
        "//options",
        "//util:test_utils",
        "//memory:headers",
        "//trace_replay:headers"
    ],
    visibility = ["//visibility:public"],
)

constrained_test(
    name = "block_based_filter_block_test",
    srcs = ["block_based_filter_block_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "block_test",
    srcs = ["block_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "cleanable_test",
    srcs = ["cleanable_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "cuckoo_table_builder_test",
    srcs = ["cuckoo_table_builder_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "cuckoo_table_reader_test",
    srcs = ["cuckoo_table_reader_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "full_filter_block_test",
    srcs = ["full_filter_block_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "merger_test",
    srcs = ["merger_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "partitioned_filter_block_test",
    srcs = ["partitioned_filter_block_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)

constrained_test(
    name = "table_test",
    srcs = ["table_test.cc"],
    deps = [
        ":table",
        ":test_utils",
        "//cache",
        "//db",
        "//env",
        "//memtable",
        "//monitoring",
        "//options",
        "//third_party/gtest",
	"//util",
	"//utilities",
	"//utilities/backupable",
	"//utilities/checkpoint",
	"//utilities/leveldb_options",
	"//utilities/merge_operators",
	"//utilities/merge_operators/string_append",
	"//utilities/options",
	"//utilities/transactions",
	"//utilities/ttl",
	"//utilities/write_batch_with_index",
    ],
)
